{"version":3,"sources":["logo.svg","components/Header.js","pages/Contact.js","components/Card.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","theme","root","color","palette","text","primary","icon","margin","spacing","fontSize","Header","classes","react_default","a","createElement","className","react_router_dom","to","Home_default","Info_default","Contact","style","textAlign","href","card","maxWidth","ImgMediaCard","Card","CardActionArea","CardMedia","component","alt","image","title","CardContent","Typography","gutterBottom","variant","CardActions","Button","size","Home","App","components_Header","react_router","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75e84db9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport HomeIcon from '@material-ui/icons/Home';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      color: theme.palette.text.primary,\n    },\n    icon: {\n      margin: theme.spacing(1),\n      fontSize: 32,\n    },\n  }));\n\nconst Header = () => {\n    const classes = useStyles();\n    \n    return (\n        <div className=\"Header\">\n            <h1>Header</h1>\n            <Link to=\"/\">\n                Home<br></br><HomeIcon className={classes.icon}/>\n            </Link>\n            <Link to=\"/contact\">\n                Contact<br></br><InfoIcon className={classes.icon}/>\n            </Link>\n        </div>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nconst Contact = () => (\n    <div className=\"Contact-info\">\n        <h1 style={{textAlign: \"center\"}}>Contact</h1>\n        <hr></hr>\n        <table className=\"info-table\">\n            <tr>\n                <td>Phone:</td>\n                <td>555-555-5555</td>\n            </tr>\n            <tr>\n                <td>email:</td>\n                <td>email@website.com</td>\n            </tr>\n            <tr>\n                <td>GitHub:</td>\n                <td><a href=\"#\">www.hereisalinktogithub.com</a></td>\n            </tr>\n            <tr>\n                <td>LinkedIn:</td>\n                <td><a href=\"#\">www.workrelatedsocialmedialink.com</a></td>\n            </tr>\n        </table>\n        <br></br>\n        <br></br>\n    </div>\n)\n\nexport default Contact;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n    card: {\n      maxWidth: 345,\n    },\n  });\n  \n  export default function ImgMediaCard() {\n    const classes = useStyles();\n  \n    return (\n      <Card className={classes.card}>\n        <CardActionArea>\n          <CardMedia\n            component=\"img\"\n            alt=\"Contemplative Reptile\"\n            image=\"/static/images/cards/contemplative-reptile.jpg\"\n            title=\"Contemplative Reptile\"\n          />\n          <CardContent>\n            <Typography gutterBottom variant=\"h5\" component=\"h2\">\n              Lizard\n            </Typography>\n            <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n              across all continents except Antarctica\n            </Typography>\n          </CardContent>\n        </CardActionArea>\n        <CardActions>\n          <Button size=\"small\" color=\"primary\">\n            Share\n          </Button>\n          <Button size=\"small\" color=\"primary\">\n            Learn More\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  }","import React from 'react';\nimport Card from '../components/Card';\nimport './Home.css';\n\nconst Home = () => (\n  <div className='HomeDiv'>\n    <div className='CardContainer'>\n      <Card />\n      <Card />\n      <Card />\n    </div>\n    <br></br>\n  </div>\n)\n\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport Header from './components/Header';\nimport Contact  from './pages/Contact';\nimport Home from './pages/Home';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"MainDiv\">\n        <Router>\n          <Header />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/\" exact component={Home} />\n        </Router>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}